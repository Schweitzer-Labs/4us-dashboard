name: 4US Dashboard
on:
  push:
    branches:
      - prod
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - uses: act10ns/slack@v1
        with:
          status: Starting
          channel: '#dev-updates'
        if: always()
      - name: Checkout
        uses: actions/checkout@v2
      - name: AWS IAM Role
        id: setup-aws-access
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Setup Python 
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python libs
        id: install-python-libs
        run: |
          pip3 install -r build-reqs.txt
      - name: Install and set up elm
        id: install-elm
        uses: jorelali/setup-elm@v3
        with:
          elm-version: 0.19.1
      - name: Install create-elm-app
        id: install-elm-app
        run: |
          npm install create-elm-app
      - name: Set environment to Production
        id: set-deployment-target-to-prod
        if: endsWith(github.ref, '/prod')
        run: |
          echo "RUNENV=prod" >> $GITHUB_ENV
      - name: Assemble CloudFormation Stack
        id: assemble-cloudformation-stack
        run: |
          make RUNENV=${{ env.RUNENV }} clean build-stacks
      - name: Generate and Upload CloudFormation Package
        id: generate-and-upload-cloudformation-package
        run: |
          make RUNENV=${{ env.RUNENV }} package
      - name: Deploy CloudFormation Package
        id: deploy-cloudformation-package-to-aws
        run: |
          make RUNENV=${{ env.RUNENV }} deploy-infra
      - name: Deploy Static Web Assets to S3
        id: deploy-web-assets-to-s3
        run: |
          make RUNENV=${{ env.RUNENV }} deploy-web
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#dev-updates'
        if: always()
