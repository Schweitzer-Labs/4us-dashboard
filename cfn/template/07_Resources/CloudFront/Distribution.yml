Distribution:
  Type: AWS::CloudFront::Distribution
  Properties:
    DistributionConfig:
      Comment: !Sub Deployed via ${AWS::StackName}
      Enabled: true
      PriceClass: PriceClass_100
      HttpVersion: http2
      DefaultRootObject: index.html
      IPV6Enabled: true
      Aliases:
        - !Sub ${SubDomain}-${RunEnvironment}.${Domain}.${TLD}
      Origins:
        - Id: WebsiteBucket
          DomainName: !Sub ${WebsiteBucket.DomainName}
          OriginPath: ''
          ConnectionAttempts: 3
          ConnectionTimeout: 10
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAI}
        - Id: CommitteeGateway
          DomainName: !Sub ${CommitteeGateway}.execute-api.${AWS::Region}.amazonaws.com
          OriginPath: !Sub /${RunEnvironment}
          ConnectionAttempts: 3
          ConnectionTimeout: 10
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
      DefaultCacheBehavior:
        TargetOriginId: WebsiteBucket
        CachePolicyId: !Ref CachePolicyS3
        ViewerProtocolPolicy: redirect-to-https
        FunctionAssociations:
          - EventType: viewer-request
            FunctionARN: !GetAtt DirectoryIndexFunction.FunctionMetadata.FunctionARN
          - EventType: viewer-response
            FunctionARN: !GetAtt SecureHeadersFunction.FunctionMetadata.FunctionARN
      CacheBehaviors:
        - TargetOriginId: CommitteeGateway
          PathPattern: api/*
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref CachePolicyApiGw
          AllowedMethods:
            - HEAD
            - OPTIONS
            - GET
            - PATCH
            - POST
            - PUT
            - DELETE
      ViewerCertificate:
        AcmCertificateArn: !Ref CloudFrontCertificate
        MinimumProtocolVersion: TLSv1.2_2019
        SslSupportMethod: sni-only
{% if RUNENV == 'prod' %}
      WebACLId: !GetAtt CloudFrontFirewall.Arn
{% endif %}
